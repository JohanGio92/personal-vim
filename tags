!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
<C-E>	ftplugin/vim/complete.vim	/^inoremap <C-E> <C-R>=CompleteEvent()<cr>$/;"	m
<C-k>	plugin/map/insert.vim	/^inoremap <C-k> <C-x><C-k>$/;"	m
<C-l>	plugin/map/insert.vim	/^inoremap <C-l> <C-x><C-l>$/;"	m
<C-m>	plugin/personal-complete.vim	/^inoremap <expr> <C-m> pumvisible() ?  "\\<C-n>" : "\\<C-m>"$/;"	m
<C-o>	plugin/map/insert.vim	/^inoremap <C-o> <C-x><C-o>$/;"	m
<C-t>	plugin/personal-complete.vim	/^inoremap <C-t> <C-r>=MyComplete()<CR>$/;"	m
<Enter>	plugin/map/normal.vim	/^nnoremap <Enter> a<Enter><Esc>k\$$/;"	m
<F2>	plugin/third-party/color-vimrc.vim	/^inoremap <F2> <Esc>:VCoolor<CR>$/;"	m
<F2>	plugin/third-party/color-vimrc.vim	/^nnoremap <F2> :VCoolor<CR>$/;"	m
<F8>	plugin/third-party/tagBar.vim	/^nmap <F8> :TagbarToggle<CR>$/;"	m
<TAB>	plugin/third-party/coc.vim	/^nmap <silent> <TAB> <Plug>(coc-range-select)$/;"	m
<cr>	plugin/third-party/coc.vim	/^inoremap <expr> <cr> pumvisible() ? "\\<C-y>" : "\\<C-g>u\\<CR>"$/;"	m
<leader><	plugin/personal-control-mapping.vim	/^cnoremap <leader>< <lt ><left><bs><right>$/;"	m
<leader><C-a>	plugin/personal-control-mapping.vim	/^cnoremap <leader><C-a> <C-a ><left><bs><right>    $/;"	m
<leader><C-b>	plugin/personal-control-mapping.vim	/^cnoremap <leader><C-b> <C-b ><left><bs><right>$/;"	m
<leader><C-c>	plugin/personal-control-mapping.vim	/^cnoremap <leader><C-c> <C-c ><left><bs><right>$/;"	m
<leader><C-d>	plugin/personal-control-mapping.vim	/^cnoremap <leader><C-d> <C-d ><left><bs><right>$/;"	m
<leader><C-down>	plugin/personal-control-mapping.vim	/^cnoremap <leader><C-down> <C-down ><left><bs><right>$/;"	m
<leader><C-e>	plugin/personal-control-mapping.vim	/^cnoremap <leader><C-e> <C-e ><left><bs><right>$/;"	m
<leader><C-f>	plugin/personal-control-mapping.vim	/^cnoremap <leader><C-f> <C-f ><left><bs><right>$/;"	m
<leader><C-g>	plugin/personal-control-mapping.vim	/^cnoremap <leader><C-g> <C-g ><left><bs><right>$/;"	m
<leader><C-h>	plugin/personal-control-mapping.vim	/^cnoremap <leader><C-h> <C-h ><left><bs><right>$/;"	m
<leader><C-i>	plugin/personal-control-mapping.vim	/^cnoremap <leader><C-i> <C-i ><left><bs><right>$/;"	m
<leader><C-j>	plugin/personal-control-mapping.vim	/^cnoremap <leader><C-j> <C-j ><left><bs><right>$/;"	m
<leader><C-k>	plugin/personal-control-mapping.vim	/^cnoremap <leader><C-k> <C-k ><left><bs><right>$/;"	m
<leader><C-l>	plugin/personal-control-mapping.vim	/^cnoremap <leader><C-l> <C-l ><left><bs><right>$/;"	m
<leader><C-left>	plugin/personal-control-mapping.vim	/^cnoremap <leader><C-left> <C-left ><left><bs><right>$/;"	m
<leader><C-m>	plugin/personal-control-mapping.vim	/^cnoremap <leader><C-m> <C-m ><left><bs><right>$/;"	m
<leader><C-n>	plugin/personal-control-mapping.vim	/^cnoremap <leader><C-n> <C-n ><left><bs><right>$/;"	m
<leader><C-o>	plugin/personal-control-mapping.vim	/^cnoremap <leader><C-o> <C-o ><left><bs><right>$/;"	m
<leader><C-p>	plugin/personal-control-mapping.vim	/^cnoremap <leader><C-p> <C-p ><left><bs><right>$/;"	m
<leader><C-q>	plugin/personal-control-mapping.vim	/^cnoremap <leader><C-q> <C-q ><left><bs><right>$/;"	m
<leader><C-r>	plugin/personal-control-mapping.vim	/^cnoremap <leader><C-r> <C-r ><left><bs><right>$/;"	m
<leader><C-right>	plugin/personal-control-mapping.vim	/^cnoremap <leader><C-right> <C-right ><left><bs><right>$/;"	m
<leader><C-s>	plugin/personal-control-mapping.vim	/^cnoremap <leader><C-s> <C-s ><left><bs><right>$/;"	m
<leader><C-t>	plugin/personal-control-mapping.vim	/^cnoremap <leader><C-t> <C-t ><left><bs><right>$/;"	m
<leader><C-u>	plugin/personal-control-mapping.vim	/^cnoremap <leader><C-u> <C-u ><left><bs><right>$/;"	m
<leader><C-up>	plugin/personal-control-mapping.vim	/^cnoremap <leader><C-up> <C-up ><left><bs><right>$/;"	m
<leader><C-v>	plugin/personal-control-mapping.vim	/^cnoremap <leader><C-v> <C-v ><left><bs><right>$/;"	m
<leader><C-w>	plugin/personal-control-mapping.vim	/^cnoremap <leader><C-w> <C-w ><left><bs><right>$/;"	m
<leader><C-x>	plugin/personal-control-mapping.vim	/^cnoremap <leader><C-x> <C-x ><left><bs><right>$/;"	m
<leader><C-y>	plugin/personal-control-mapping.vim	/^cnoremap <leader><C-y> <C-y ><left><bs><right>$/;"	m
<leader><C-z>	plugin/personal-control-mapping.vim	/^cnoremap <leader><C-z> <C-z ><left><bs><right>$/;"	m
<leader><S-a>	plugin/personal-control-mapping.vim	/^cnoremap <leader><S-a> <S-a ><left><bs><right>    $/;"	m
<leader><S-b>	plugin/personal-control-mapping.vim	/^cnoremap <leader><S-b> <S-b ><left><bs><right>$/;"	m
<leader><S-c>	plugin/personal-control-mapping.vim	/^cnoremap <leader><S-c> <S-c ><left><bs><right>$/;"	m
<leader><S-d>	plugin/personal-control-mapping.vim	/^cnoremap <leader><S-d> <S-d ><left><bs><right>$/;"	m
<leader><S-e>	plugin/personal-control-mapping.vim	/^cnoremap <leader><S-e> <S-e ><left><bs><right>$/;"	m
<leader><S-f>	plugin/personal-control-mapping.vim	/^cnoremap <leader><S-f> <S-f ><left><bs><right>$/;"	m
<leader><S-g>	plugin/personal-control-mapping.vim	/^cnoremap <leader><S-g> <S-g ><left><bs><right>$/;"	m
<leader><S-h>	plugin/personal-control-mapping.vim	/^cnoremap <leader><S-h> <S-h ><left><bs><right>$/;"	m
<leader><S-i>	plugin/personal-control-mapping.vim	/^cnoremap <leader><S-i> <S-i ><left><bs><right>$/;"	m
<leader><S-j>	plugin/personal-control-mapping.vim	/^cnoremap <leader><S-j> <S-j ><left><bs><right>$/;"	m
<leader><S-k>	plugin/personal-control-mapping.vim	/^cnoremap <leader><S-k> <S-k ><left><bs><right>$/;"	m
<leader><S-l>	plugin/personal-control-mapping.vim	/^cnoremap <leader><S-l> <S-l ><left><bs><right>$/;"	m
<leader><S-m>	plugin/personal-control-mapping.vim	/^cnoremap <leader><S-m> <S-m ><left><bs><right>$/;"	m
<leader><S-n>	plugin/personal-control-mapping.vim	/^cnoremap <leader><S-n> <S-n ><left><bs><right>$/;"	m
<leader><S-o>	plugin/personal-control-mapping.vim	/^cnoremap <leader><S-o> <S-o ><left><bs><right>$/;"	m
<leader><S-p>	plugin/personal-control-mapping.vim	/^cnoremap <leader><S-p> <S-p ><left><bs><right>$/;"	m
<leader><S-q>	plugin/personal-control-mapping.vim	/^cnoremap <leader><S-q> <S-q ><left><bs><right>$/;"	m
<leader><S-r>	plugin/personal-control-mapping.vim	/^cnoremap <leader><S-r> <S-r ><left><bs><right>$/;"	m
<leader><S-s>	plugin/personal-control-mapping.vim	/^cnoremap <leader><S-s> <S-s ><left><bs><right>$/;"	m
<leader><S-t>	plugin/personal-control-mapping.vim	/^cnoremap <leader><S-t> <S-t ><left><bs><right>$/;"	m
<leader><S-u>	plugin/personal-control-mapping.vim	/^cnoremap <leader><S-u> <S-u ><left><bs><right>$/;"	m
<leader><S-v>	plugin/personal-control-mapping.vim	/^cnoremap <leader><S-v> <S-v ><left><bs><right>$/;"	m
<leader><S-w>	plugin/personal-control-mapping.vim	/^cnoremap <leader><S-w> <S-w ><left><bs><right>$/;"	m
<leader><S-x>	plugin/personal-control-mapping.vim	/^cnoremap <leader><S-x> <S-x ><left><bs><right>$/;"	m
<leader><S-y>	plugin/personal-control-mapping.vim	/^cnoremap <leader><S-y> <S-y ><left><bs><right>$/;"	m
<leader><S-z>	plugin/personal-control-mapping.vim	/^cnoremap <leader><S-z> <S-z ><left><bs><right>$/;"	m
<leader><leader><down>	plugin/personal-control-mapping.vim	/^cnoremap <leader><leader><down> <down ><left><bs><right>$/;"	m
<leader><leader><left>	plugin/personal-control-mapping.vim	/^cnoremap <leader><leader><left> <left ><left><bs><right>$/;"	m
<leader><leader><right>	plugin/personal-control-mapping.vim	/^cnoremap <leader><leader><right> <right ><left><bs><right>$/;"	m
<leader><leader><up>	plugin/personal-control-mapping.vim	/^cnoremap <leader><leader><up> <up ><left><bs><right>$/;"	m
<leader><s-down>	plugin/personal-control-mapping.vim	/^cnoremap <leader><s-down> <s-down ><left><bs><right>$/;"	m
<leader><s-left>	plugin/personal-control-mapping.vim	/^cnoremap <leader><s-left> <s-left ><left><bs><right>$/;"	m
<leader><s-right>	plugin/personal-control-mapping.vim	/^cnoremap <leader><s-right> <s-right ><left><bs><right>$/;"	m
<leader><s-up>	plugin/personal-control-mapping.vim	/^cnoremap <leader><s-up> <s-up ><left><bs><right>$/;"	m
<leader>\|	plugin/personal-control-mapping.vim	/^cnoremap <leader>\\| <Bar ><left><bs><right>$/;"	m
<leader>a	plugin/third-party/coc.vim	/^nmap <leader>a  <Plug>(coc-codeaction-selected)$/;"	m
<leader>ac	plugin/third-party/coc.vim	/^nmap <leader>ac  <Plug>(coc-codeaction)$/;"	m
<leader>f	plugin/third-party/coc.vim	/^nmap <leader>f  <Plug>(coc-format-selected)$/;"	m
<leader>g	plugin/third-party/grepHardWay.vim	/^nnoremap <leader>g :set operatorfunc=<SID>GrepOperator<cr>g@$/;"	m
<leader>g	plugin/third-party/grepHardWay.vim	/^vnoremap <leader>g :<c-u>call <SID>GrepOperator(visualmode())<cr>$/;"	m
<leader>h	plugin/third-party/highliter.vim	/^nnoremap <silent> <leader>h :call InterestingWords('n')<cr>$/;"	m
<leader>h	plugin/third-party/highliter.vim	/^nnoremap <silent> <leader>h :call UncolorAllWords()<cr>$/;"	m
<leader>ln	ftplugin/help/mapping.vim	/^nnoremap <buffer> <leader>ln :call Link<C-V>()<cr> $/;"	m
<leader>qf	plugin/third-party/coc.vim	/^nmap <leader>qf  <Plug>(coc-fix-current)$/;"	m
<leader>rn	plugin/third-party/coc.vim	/^nmap <leader>rn <Plug>(coc-rename)$/;"	m
<leader>tg	ftplugin/help/mapping.vim	/^nnoremap <buffer> <leader>tg :call Tag<C-V>()<cr> $/;"	m
<leader>tr	plugin/third-party/translate.vim	/^nnoremap <silent> <leader>tr :Trans -brief<CR>$/;"	m
<leader>tr	plugin/third-party/translate.vim	/^vnoremap <silent> <leader>tr :Trans -brief<CR>$/;"	m
<space>	plugin/map/normal.vim	/^nmap <space> \/$/;"	m
<space>a	plugin/third-party/coc.vim	/^nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>$/;"	m
<space>c	plugin/third-party/coc.vim	/^nnoremap <silent> <space>c  :<C-u>CocList commands<cr>$/;"	m
<space>e	plugin/third-party/coc.vim	/^nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>$/;"	m
<space>j	plugin/third-party/coc.vim	/^nnoremap <silent> <space>j  :<C-u>CocNext<CR>$/;"	m
<space>k	plugin/third-party/coc.vim	/^nnoremap <silent> <space>k  :<C-u>CocPrev<CR>$/;"	m
<space>o	plugin/third-party/coc.vim	/^nnoremap <silent> <space>o  :<C-u>CocList outline<cr>$/;"	m
<space>p	plugin/third-party/coc.vim	/^nnoremap <silent> <space>p  :<C-u>CocListResume<CR>$/;"	m
<space>s	plugin/third-party/coc.vim	/^nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>$/;"	m
AddMatch	ftplugin/vim/complete.vim	/^function! AddMatch(base) abort$/;"	f
C_extension	ftplugin/c/abbreviation.vim	/^function! C_extension()$/;"	f
Cextension	ftplugin/c/command.vim	/^command! Cextension :silent call C_extension() $/;"	c
CocJson	plugin/third-party/coc.vim	/^augroup CocJson$/;"	a
CompleteEvent	ftplugin/vim/complete.vim	/^function! CompleteEvent() abort$/;"	f
CompleteFA	ftplugin/css/completation.vim	/^function! CompleteFA(findstart, base)$/;"	f
CompleteFyleType	plugin/template.vim	/^function! CompleteFyleType(findstart, base) abort "{{{$/;"	f
CreateNormalEspaciadorMap	plugin/map/normal.vim	/^function! s:CreateNormalEspaciadorMap() abort "{{{$/;"	f
CreateNormalF1ToF12Map	plugin/map/normal.vim	/^function! s:CreateNormalF1ToF12Map() abort "{{{$/;"	f
CreateNormalFoldingMap	plugin/map/normal.vim	/^function! s:CreateNormalFoldingMap() abort "{{{$/;"	f
CreateNormalLeaderMap	plugin/map/normal.vim	/^function! s:CreateNormalLeaderMap() abort "{{{$/;"	f
CreateVisualMatchPairMap	plugin/map/visual.vim	/^function! s:CreateVisualMatchPairMap() abort "{{{$/;"	f
Fold	plugin/third-party/coc.vim	/^command! -nargs=? Fold :call     CocAction('fold', <f-args>)$/;"	c
Format	plugin/third-party/coc.vim	/^command! -nargs=0 Format :call CocAction('format')$/;"	c
GrepOperator	plugin/third-party/grepHardWay.vim	/^function! s:GrepOperator(type)$/;"	f
Help	ftplugin/help/mapping.vim	/^function! s:Help(type) abort$/;"	f
Hola	ftplugin/sh/abbreviation.vim	/^function! Hola() abort$/;"	f
K	plugin/third-party/coc.vim	/^nnoremap <silent> K :call <SID>show_documentation()<CR>$/;"	m
LightlineFilename	plugin/third-party/lightline.vim	/^function! LightlineFilename()$/;"	f
Link	ftplugin/help/mapping.vim	/^function! Link() abort$/;"	f
MyComplete	plugin/personal-complete.vim	/^fun! MyComplete()$/;"	f
N	plugin/third-party/highliter.vim	/^nnoremap <silent> N :call WordNavigation('backward')<cr>$/;"	m
OR	plugin/third-party/coc.vim	/^command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')$/;"	c
ObtenerComienzoDeLaPalabra	ftplugin/vim/complete.vim	/^function! ObtenerComienzoDeLaPalabra(palabraImcompleta, linea) abort$/;"	f
OmniFunction	plugin/personal-autocommand-insert.vim	/^augroup OmniFunction $/;"	a
SwitchKeyword	plugin/personal-command.vim	/^command! SwitchKeyword :call SwitchKeyword()$/;"	c
SwitchMatchPair	plugin/personal-command.vim	/^command! SwitchMatchPair :call SwitchMatchPairMapping()$/;"	c
Tag	ftplugin/help/mapping.vim	/^function! Tag() abort$/;"	f
Templates	plugin/template.vim	/^function! Templates(fileName, pattern) "{{{$/;"	f
[g	plugin/third-party/coc.vim	/^nmap <silent> [g <Plug>(coc-diagnostic-prev)$/;"	m
]g	plugin/third-party/coc.vim	/^nmap <silent> ]g <Plug>(coc-diagnostic-next)$/;"	m
af	plugin/third-party/coc.vim	/^omap af <Plug>(coc-funcobj-a)$/;"	m
aso	plugin/map/command.vim	/^cnoremap aso source %$/;"	m
filetype_vim	plugin/third-party/folding.vim	/^augroup filetype_vim$/;"	a
g:auto_save	plugin/third-party/autosave.vim	/^let g:auto_save = 1  " enable AutoSave on Vim startup$/;"	v
g:keywordSwitched	autoload/map/normal/switcher.vim	/^let g:keywordSwitched = 1$/;"	v
g:lightline	plugin/third-party/lightline.vim	/^let g:lightline = {$/;"	v
g:livepreview_engine	plugin/third-party/vim-latex-live-preview.vim	/^let g:livepreview_engine = 'pdflatex'$/;"	v
g:livepreview_previewer	plugin/third-party/vim-latex-live-preview.vim	/^let g:livepreview_previewer = 'FoxitReader'$/;"	v
g:multi_cursor_next_key	plugin/third-party/multiple-cursor.vim	/^let g:multi_cursor_next_key            = '<C-n>'$/;"	v
g:multi_cursor_prev_key	plugin/third-party/multiple-cursor.vim	/^let g:multi_cursor_prev_key            = '<C-p>'$/;"	v
g:multi_cursor_quit_key	plugin/third-party/multiple-cursor.vim	/^let g:multi_cursor_quit_key            = '<Esc>'$/;"	v
g:multi_cursor_select_all_key	plugin/third-party/multiple-cursor.vim	/^let g:multi_cursor_select_all_key      = 'g<A-n>'$/;"	v
g:multi_cursor_select_all_word_key	plugin/third-party/multiple-cursor.vim	/^let g:multi_cursor_select_all_word_key = '<A-n>'$/;"	v
g:multi_cursor_skip_key	plugin/third-party/multiple-cursor.vim	/^let g:multi_cursor_skip_key            = '<C-x>'$/;"	v
g:multi_cursor_start_key	plugin/third-party/multiple-cursor.vim	/^let g:multi_cursor_start_key           = 'g<C-n>'$/;"	v
g:multi_cursor_start_word_key	plugin/third-party/multiple-cursor.vim	/^let g:multi_cursor_start_word_key      = '<C-n>'$/;"	v
g:multi_cursor_use_default_mapping	plugin/third-party/multiple-cursor.vim	/^let g:multi_cursor_use_default_mapping=0$/;"	v
g:switchmapped	autoload/map/normal/switcher.vim	/^let g:switchmapped = 1$/;"	v
g:syntastic_always_populate_loc_list	plugin/third-party/syntastic.vim	/^let g:syntastic_always_populate_loc_list = 1$/;"	v
g:syntastic_auto_loc_list	plugin/third-party/syntastic.vim	/^let g:syntastic_auto_loc_list = 1$/;"	v
g:syntastic_check_on_open	plugin/third-party/syntastic.vim	/^let g:syntastic_check_on_open = 1$/;"	v
g:syntastic_check_on_wq	plugin/third-party/syntastic.vim	/^let g:syntastic_check_on_wq = 0$/;"	v
g:template_path	autoload/template/templator.vim	/^let g:template_path = "~\/.vim\/bundle\/personal-vim\/template\/"$/;"	v
g:template_path	plugin/template.vim	/^let g:template_path = "~\/.vim\/bundle\/personal-vim\/template\/"$/;"	v
g:trans_default_direction	plugin/third-party/translate.vim	/^let g:trans_default_direction="en:es"$/;"	v
g:unite_force_overwrite_statusline	plugin/third-party/lightline.vim	/^let g:unite_force_overwrite_statusline = 0$/;"	v
g:vimfiler_force_overwrite_statusline	plugin/third-party/lightline.vim	/^let g:vimfiler_force_overwrite_statusline = 0$/;"	v
g:vimshell_force_overwrite_statusline	plugin/third-party/lightline.vim	/^let g:vimshell_force_overwrite_statusline = 0$/;"	v
g:ycm_clangd_args	plugin/third-party/youcompletme.vim	/^let g:ycm_clangd_args = ['-log=verbose', '-pretty']$/;"	v
g:ycm_clangd_binary_path	plugin/third-party/youcompletme.vim	/^let g:ycm_clangd_binary_path = exepath("clangd")$/;"	v
g:ycm_clangd_uses_ycmd_caching	plugin/third-party/youcompletme.vim	/^let g:ycm_clangd_uses_ycmd_caching = 0$/;"	v
gd	plugin/third-party/coc.vim	/^nmap <silent> gd <Plug>(coc-definition)$/;"	m
gi	plugin/third-party/coc.vim	/^nmap <silent> gi <Plug>(coc-implementation)$/;"	m
gr	plugin/third-party/coc.vim	/^nmap <silent> gr <Plug>(coc-references)$/;"	m
gy	plugin/third-party/coc.vim	/^nmap <silent> gy <Plug>(coc-type-definition)$/;"	m
if	plugin/third-party/coc.vim	/^omap if <Plug>(coc-funcobj-i)$/;"	m
map#normal#espaciador#agnadirNumeroDeLinea	autoload/map/normal/espaciador.vim	/^function! map#normal#espaciador#agnadirNumeroDeLinea()$/;"	f
map#normal#espaciador#espaciarAbajo	autoload/map/normal/espaciador.vim	/^function! map#normal#espaciador#espaciarAbajo()$/;"	f
map#normal#espaciador#espaciarArriba	autoload/map/normal/espaciador.vim	/^function! map#normal#espaciador#espaciarArriba()$/;"	f
map#normal#espaciador#espaciarDerecha	autoload/map/normal/espaciador.vim	/^function! map#normal#espaciador#espaciarDerecha()$/;"	f
map#normal#espaciador#espaciarIzquierda	autoload/map/normal/espaciador.vim	/^function! map#normal#espaciador#espaciarIzquierda()$/;"	f
map#normal#espaciador#removerEspaciadoDeAbajo	autoload/map/normal/espaciador.vim	/^function! map#normal#espaciador#removerEspaciadoDeAbajo()$/;"	f
map#normal#espaciador#removerEspaciadoDeArriba	autoload/map/normal/espaciador.vim	/^function! map#normal#espaciador#removerEspaciadoDeArriba() $/;"	f
map#normal#espaciador#removerNumeroDeLinea	autoload/map/normal/espaciador.vim	/^function! map#normal#espaciador#removerNumeroDeLinea()$/;"	f
map#normal#switcher#offMatchPairComandUnMapping	autoload/map/normal/switcher.vim	/^function! map#normal#switcher#offMatchPairComandUnMapping(mode) abort "{{{$/;"	f
map#normal#switcher#onMatchPairComandMapping	autoload/map/normal/switcher.vim	/^function! map#normal#switcher#onMatchPairComandMapping() abort "{{{$/;"	f
map#normal#switcher#onMatchPairInsertMapping	autoload/map/normal/switcher.vim	/^function! map#normal#switcher#onMatchPairInsertMapping() abort "{{{$/;"	f
map#normal#switcher#switchKeyword	autoload/map/normal/switcher.vim	/^function! map#normal#switcher#switchKeyword() abort "{{{$/;"	f
map#normal#switcher#switchMatchPairMapping	autoload/map/normal/switcher.vim	/^function! map#normal#switcher#switchMatchPairMapping() abort "{{{$/;"	f
map#visual#matcherPair#putAngleBracket	autoload/map/visual/matcherPair.vim	/^function! map#visual#matcherPair#putAngleBracket()$/;"	f
map#visual#matcherPair#putBackStick	autoload/map/visual/matcherPair.vim	/^function! map#visual#matcherPair#putBackStick()$/;"	f
map#visual#matcherPair#putBar	autoload/map/visual/matcherPair.vim	/^function! map#visual#matcherPair#putBar()$/;"	f
map#visual#matcherPair#putCharacterBetween	autoload/map/visual/matcherPair.vim	/^function! map#visual#matcherPair#putCharacterBetween(left, right)$/;"	f
map#visual#matcherPair#putCurlyBracket	autoload/map/visual/matcherPair.vim	/^function! map#visual#matcherPair#putCurlyBracket()$/;"	f
map#visual#matcherPair#putDobleQuote	autoload/map/visual/matcherPair.vim	/^function! map#visual#matcherPair#putDobleQuote()$/;"	f
map#visual#matcherPair#putParenthesis	autoload/map/visual/matcherPair.vim	/^function! map#visual#matcherPair#putParenthesis()$/;"	f
map#visual#matcherPair#putSingleQuote	autoload/map/visual/matcherPair.vim	/^function! map#visual#matcherPair#putSingleQuote()$/;"	f
map#visual#matcherPair#putSquareBracket	autoload/map/visual/matcherPair.vim	/^function! map#visual#matcherPair#putSquareBracket()$/;"	f
map#visual#matcherPair#putStar	autoload/map/visual/matcherPair.vim	/^function! map#visual#matcherPair#putStar()$/;"	f
mygroup	plugin/third-party/coc.vim	/^augroup mygroup$/;"	a
n	plugin/third-party/highliter.vim	/^nnoremap <silent> n :call WordNavigation('forward')<cr>$/;"	m
s:matches	ftplugin/css/completation.vim	/^let s:matches=".fa-lg .fa-2x .fa-3x .fa-4x .fa-5x .fa-fw .fa-ul .fa-ul .fa-li .fa-li.fa-lg .fa-border .fa-pull-left .fa-pull-right .fa.fa-pull-left"$/;"	v
s:matches	ftplugin/vim/complete.vim	/^let s:matches = ["BufNewFile",$/;"	v
show_documentation	plugin/third-party/coc.vim	/^function! s:show_documentation()$/;"	f
template#dataStructure#forItem	autoload/template/dataStructure.vim	/^function! template#dataStructure#forItem() abort$/;"	f
template#dataStructure#forKey	autoload/template/dataStructure.vim	/^function! template#dataStructure#forKey() abort$/;"	f
template#function#dividir	autoload/template/function.vim	/^function! template#function#dividir() abort$/;"	f
template#function#estaVacio	autoload/template/function.vim	/^function! template#function#estaVacio() abort$/;"	f
template#function#main	autoload/template/function.vim	/^function! template#function#main() abort$/;"	f
template#function#multiplicar	autoload/template/function.vim	/^function! template#function#multiplicar() abort$/;"	f
template#function#restar	autoload/template/function.vim	/^function! template#function#restar() abort$/;"	f
template#function#sumar	autoload/template/function.vim	/^function! template#function#sumar() abort$/;"	f
template#keyword#augroup	autoload/template/keyword.vim	/^function! template#keyword#augroup() abort$/;"	f
template#keyword#else	autoload/template/keyword.vim	/^function! template#keyword#else() abort$/;"	f
template#keyword#elseIf	autoload/template/keyword.vim	/^function! template#keyword#elseIf() abort$/;"	f
template#keyword#for	autoload/template/keyword.vim	/^function! template#keyword#for() abort$/;"	f
template#keyword#function	autoload/template/keyword.vim	/^function! template#keyword#function() abort$/;"	f
template#keyword#if	autoload/template/keyword.vim	/^function! template#keyword#if() abort$/;"	f
template#keyword#while	autoload/template/keyword.vim	/^function! template#keyword#while() abort$/;"	f
template#templator#complete	autoload/template/templator.vim	/^function! template#templator#complete(findstart, base) abort "{{{$/;"	f
template#templator#construir	autoload/template/templator.vim	/^function! template#templator#construir(fileName, pattern)$/;"	f
vim#mapper#mapArrow	autoload/vim/mapper.vim	/^function! vim#mapper#mapArrow() abort "{{{$/;"	f
vim#mapper#mapControlInInsertMode	autoload/vim/mapper.vim	/^function! vim#mapper#mapControlInInsertMode() abort "{{{$/;"	f
vim#mapper#mapShiftInInsertMode	autoload/vim/mapper.vim	/^function! vim#mapper#mapShiftInInsertMode() abort "{{{$/;"	f
