!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
'a	ftplugin/tex/insert-map.vim	/^inoremap 'a \\'{a}$/;"	m
'e	ftplugin/tex/insert-map.vim	/^inoremap 'e \\'{e}$/;"	m
'i	ftplugin/tex/insert-map.vim	/^inoremap 'i \\'{i}$/;"	m
'o	ftplugin/tex/insert-map.vim	/^inoremap 'o \\'{o}$/;"	m
'u	ftplugin/tex/insert-map.vim	/^inoremap 'u \\'{u}$/;"	m
+	plugin/map/tabpage.vim	/^nnoremap + :<C-U>call <SID>MoverPestagna('+')<cr><ESC>$/;"	m
++	plugin/visual.vim	/^vnoremap ++ :<C-U>call <SID>VisualBlockExpandir()<cr>$/;"	m
-	plugin/map/tabpage.vim	/^nnoremap - :<C-U>call <SID>MoverPestagna('-')<cr><ESC>$/;"	m
--	plugin/visual.vim	/^vnoremap -- :<C-U>call <SID>VisualBlockReducir()<cr>$/;"	m
<A-down>	plugin/personal-abbreviation.vim	/^nnoremap <A-down> :<C-U>call SwapLine('+')<cr>$/;"	m
<A-down>	plugin/personal-abbreviation.vim	/^vnoremap <A-down> :<C-U>call SwapLines('+')<cr>$/;"	m
<A-left>	plugin/visual.vim	/^vnoremap <A-left> :<C-U>call <SID>TransponerHaciaLaIzquierda()<cr>$/;"	m
<A-right>	plugin/visual.vim	/^vnoremap <A-right> :<C-U>call <SID>TransponerHaciaLaDerecha()<cr>$/;"	m
<A-up>	plugin/personal-abbreviation.vim	/^nnoremap <A-up> :<C-U>call SwapLine('-')<cr>$/;"	m
<A-up>	plugin/personal-abbreviation.vim	/^vnoremap <A-up> :<C-U>call SwapLines('-')<cr>$/;"	m
<C-B>	plugin/third-party/coc-snippet.vim	/^nnoremap <C-B> <Plug>(coc-range-select)$/;"	m
<C-B>	plugin/third-party/coc-snippet.vim	/^vnoremap <C-B> <Plug>(coc-range-select) $/;"	m
<C-E>	ftplugin/vim/complete.vim	/^inoremap <C-E> <C-R>=CompleteEvent()<cr>$/;"	m
<C-E>	plugin/template.vim	/^inoremap <C-E> <C-R>=CompleteEvent(g:especialcharacter)<cr>$/;"	m
<C-W>	plugin/template.vim	/^inoremap <C-W> <C-R>=CompleteEvent(g:pattern)<cr>$/;"	m
<C-W><down>	plugin/map/terminal.vim	/^inoremap <C-W><down> <C-\\><C-N><C-w>j$/;"	m
<C-W><left>	plugin/map/terminal.vim	/^inoremap <C-W><left> <C-\\><C-N><C-w>h$/;"	m
<C-W><right>	plugin/map/terminal.vim	/^inoremap <C-W><right> <C-\\><C-N><C-w>l$/;"	m
<C-W><up>	plugin/map/terminal.vim	/^inoremap <C-W><up> <C-\\><C-N><C-w>k$/;"	m
<C-d>	plugin/map/insert.vim	/^inoremap <C-d> <C-x><C-k>$/;"	m
<C-f>	plugin/map/insert.vim	/^inoremap <C-f> <C-x><C-f>$/;"	m
<C-k>	plugin/third-party/coc-snippet.vim	/^vmap <C-k> <Plug>(coc-snippets-select)$/;"	m
<C-l>	plugin/map/insert.vim	/^inoremap <C-l> <C-x><C-l>$/;"	m
<C-m>	plugin/personal-complete.vim	/^inoremap <expr> <C-m> pumvisible() ?  "\\<C-n>" : "\\<C-m>"$/;"	m
<C-t>	plugin/map/insert.vim	/^inoremap <C-t> <C-x><C-t>$/;"	m
<C-t>	plugin/personal-complete.vim	/^inoremap <C-t> <C-r>=MyComplete()<CR>$/;"	m
<C-u>	plugin/map/insert.vim	/^inoremap <C-u> <C-x><C-u>$/;"	m
<C-v>	plugin/map/insert.vim	/^inoremap <C-v> <C-x><C-v>$/;"	m
<F2>	plugin/third-party/color-vimrc.vim	/^inoremap <F2> <Esc>:VCoolor<CR>$/;"	m
<F2>	plugin/third-party/color-vimrc.vim	/^nnoremap <F2> :VCoolor<CR>$/;"	m
<F5>	plugin/third-party/youcompletme.vim	/^nnoremap <F5> :YcmForceCompileAndDiagnostics<CR>$/;"	m
<S-TAB>	plugin/third-party/coc.vim	/^inoremap <expr><S-TAB> pumvisible() ? "\\<C-p>" : "\\<C-h>"$/;"	m
<TAB>	plugin/third-party/coc.vim	/^inoremap <silent><expr> <TAB>$/;"	m
<TAB>	plugin/third-party/coc.vim	/^nmap <silent> <TAB> <Plug>(coc-range-select)$/;"	m
<c-space>	plugin/third-party/coc.vim	/^inoremap <silent><expr> <c-space> coc#refresh()$/;"	m
<cr>	plugin/third-party/coc.vim	/^inoremap <expr> <cr> pumvisible() ? "\\<C-y>" : "\\<C-g>u\\<CR>"$/;"	m
<down>	plugin/map/normal.vim	/^map <down> j$/;"	m
<leader><	plugin/personal-control-mapping.vim	/^cnoremap <leader>< <lt ><left><bs><right>$/;"	m
<leader><C-a>	plugin/personal-abbreviation.vim	/^vnoremap <leader><C-a> :<C-U>call Consecutivas()<cr>$/;"	m
<leader><C-w>	plugin/personal-abbreviation.vim	/^vnoremap <leader><C-w> :<C-U>call Consecutiva()<cr>$/;"	m
<leader><enter>	plugin/visual.vim	/^vnoremap <leader><enter> :<C-U>call <SID>VisualRegex()<cr>$/;"	m
<leader><leader>"	plugin/visual.vim	/^vnoremap <leader><leader>" :<C-U>call <SID>VisualPut('"')<cr>$/;"	m
<leader><leader>'	plugin/visual.vim	/^vnoremap <leader><leader>' :<C-U>call <SID>VisualPut("'")<cr>$/;"	m
<leader><leader>(	plugin/visual.vim	/^vnoremap <leader><leader>( :<C-U>call <SID>VisualPut("(")<cr>$/;"	m
<leader><leader><	plugin/visual.vim	/^vnoremap <leader><leader>< :<C-U>call <SID>VisualPut("<")<cr>$/;"	m
<leader><leader>[	plugin/visual.vim	/^vnoremap <leader><leader>[ :<C-U>call <SID>VisualPut("[")<cr>$/;"	m
<leader><leader>{	plugin/visual.vim	/^vnoremap <leader><leader>{ :<C-U>call <SID>VisualPut("{")<cr>$/;"	m
<leader>\|	plugin/personal-control-mapping.vim	/^cnoremap <leader>\\| <Bar ><left><bs><right>$/;"	m
<leader>a	plugin/third-party/coc.vim	/^nmap <leader>a  <Plug>(coc-codeaction-selected)$/;"	m
<leader>ac	plugin/third-party/coc.vim	/^nmap <leader>ac  <Plug>(coc-codeaction)$/;"	m
<leader>fm	plugin/third-party/coc.vim	/^nmap <leader>fm  <Plug>(coc-format-selected)$/;"	m
<leader>g	plugin/third-party/grepHardWay.vim	/^nnoremap <leader>g :set operatorfunc=<SID>GrepOperator<cr>g@$/;"	m
<leader>g	plugin/third-party/grepHardWay.vim	/^vnoremap <leader>g :<c-u>call <SID>GrepOperator(visualmode())<cr>$/;"	m
<leader>gN	plugin/map/insert.vim	/^inoremap <leader>gN <Esc>NNviw$/;"	m
<leader>gn	plugin/map/insert.vim	/^inoremap <leader>gn <Esc>nviw$/;"	m
<leader>gp	plugin/map/insert.vim	/^inoremap <leader>gp <Esc>NNviw$/;"	m
<leader>h	plugin/third-party/highliter.vim	/^nnoremap <silent> <leader>h :call InterestingWords('n')<cr>$/;"	m
<leader>h	plugin/third-party/highliter.vim	/^nnoremap <silent> <leader>h :call UncolorAllWords()<cr>$/;"	m
<leader>ln	ftplugin/help/mapping.vim	/^nnoremap <buffer> <leader>ln :call Link<C-V>()<cr> $/;"	m
<leader>o	plugin/third-party/tagBar.vim	/^nmap <leader>o :TagbarToggle<CR>$/;"	m
<leader>qf	plugin/third-party/coc.vim	/^nmap <leader>qf  <Plug>(coc-fix-current)$/;"	m
<leader>rf	plugin/third-party/coc.vim	/^nmap <leader>rf <Plug>(coc-rename)$/;"	m
<leader>rn	plugin/third-party/coc.vim	/^nmap <leader>rn <Plug>(coc-rename)$/;"	m
<leader>tg	ftplugin/help/mapping.vim	/^nnoremap <buffer> <leader>tg :call Tag<C-V>()<cr> $/;"	m
<leader>tr	plugin/third-party/translate.vim	/^nnoremap <silent> <leader>tr :Trans -brief<CR>$/;"	m
<leader>tr	plugin/third-party/translate.vim	/^vnoremap <silent> <leader>tr :Trans -brief<CR>$/;"	m
<leader>u	plugin/third-party/gundo.vim	/^nnoremap <leader>u :GundoToggle<CR>$/;"	m
<left>	plugin/map/normal.vim	/^map <left> h$/;"	m
<localleader>"	ftplugin/tex/insert-map.vim	/^inoremap <localleader>" ``''<left><left>$/;"	m
<localleader>'	ftplugin/tex/insert-map.vim	/^inoremap <localleader>' `'<left>$/;"	m
<localleader><down>	ftplugin/tex/insert-map.vim	/^inoremap <localleader><down> \\centering$/;"	m
<localleader><left>	ftplugin/tex/insert-map.vim	/^inoremap <localleader><left> \\raggedleft$/;"	m
<localleader><localleader>"	plugin/visual.vim	/^vnoremap <localleader><localleader>" :<C-U>call <SID>VisualBlockPut('"')<cr>$/;"	m
<localleader><localleader>'	plugin/visual.vim	/^vnoremap <localleader><localleader>' :<C-U>call <SID>VisualBlockPut("'")<cr>$/;"	m
<localleader><localleader>(	plugin/visual.vim	/^vnoremap <localleader><localleader>( :<C-U>call <SID>VisualBlockPut("(")<cr>$/;"	m
<localleader><localleader><	plugin/visual.vim	/^vnoremap <localleader><localleader>< :<C-U>call <SID>VisualBlockPut('<')<cr>$/;"	m
<localleader><localleader>[	plugin/visual.vim	/^vnoremap <localleader><localleader>[ :<C-U>call <SID>VisualBlockPut('[')<cr>$/;"	m
<localleader><localleader>{	plugin/visual.vim	/^vnoremap <localleader><localleader>{ :<C-U>call <SID>VisualBlockPut('{')<cr>$/;"	m
<localleader><right>	ftplugin/tex/insert-map.vim	/^inoremap <localleader><right> \\raggedright$/;"	m
<localleader>=	ftplugin/tex/normal-map.vim	/^nnoremap <localleader>= :VimtexDocPackage $/;"	m
<localleader>Gl	ftplugin/tex/visual-map.vim	/^vnoremap <localleader>Gl :<C-U>call TexCommand('\\Gls')<cr>$/;"	m
<localleader>ac	ftplugin/tex/normal-map.vim	/^nnoremap <localleader>ac iacronym$/;"	m
<localleader>af	ftplugin/tex/visual-map.vim	/^vnoremap <localleader>af :<C-U>call TexCommand('\\acrfull')<cr>$/;"	m
<localleader>al	ftplugin/tex/visual-map.vim	/^vnoremap <localleader>al :<C-U>call TexCommand('\\acrlong')<cr>$/;"	m
<localleader>as	ftplugin/tex/visual-map.vim	/^vnoremap <localleader>as :<C-U>call TexCommand('\\acrshort')<cr>$/;"	m
<localleader>bf	ftplugin/tex/visual-map.vim	/^vnoremap <localleader>bf :<C-U>call TexCommand('\\textbf')<cr>$/;"	m
<localleader>cd	ftplugin/tex/normal-map.vim	/^nnoremap <localleader>cd icode$/;"	m
<localleader>cl	ftplugin/tex/normal-map.vim	/^nnoremap <localleader>cl icolor$/;"	m
<localleader>ft	ftplugin/tex/normal-map.vim	/^nnoremap <localleader>ft ifooter$/;"	m
<localleader>gl	ftplugin/tex/visual-map.vim	/^vnoremap <localleader>gl :<C-U>call TexCommand('\\gls')<cr>$/;"	m
<localleader>gs	ftplugin/tex/normal-map.vim	/^nnoremap <localleader>gs iglossar$/;"	m
<localleader>hd	ftplugin/tex/normal-map.vim	/^nnoremap <localleader>hd iheader$/;"	m
<localleader>hp	ftplugin/tex/normal-map.vim	/^nnoremap <localleader>hp ihyper$/;"	m
<localleader>id	ftplugin/tex/normal-map.vim	/^nnoremap <localleader>id iindex$/;"	m
<localleader>id	ftplugin/tex/visual-map.vim	/^vnoremap <localleader>id :<C-U>call TexCommand('\\index')<cr>$/;"	m
<localleader>if	ftplugin/tex/visual-map.vim	/^vnoremap <localleader>if :<C-U>call TexCommand('\\textit')<cr>$/;"	m
<localleader>in	ftplugin/tex/normal-map.vim	/^nnoremap <localleader>in iinclude$/;"	m
<localleader>it	ftplugin/tex/insert-map.vim	/^inoremap <localleader>it \\item<space>$/;"	m
<localleader>mt	ftplugin/tex/normal-map.vim	/^nnoremap <localleader>mt iminted$/;"	m
<localleader>pt	ftplugin/tex/normal-map.vim	/^nnoremap <localleader>pt ipicture$/;"	m
<localleader>rf	ftplugin/tex/normal-map.vim	/^nnoremap <localleader>rf ireference$/;"	m
<localleader>tb	ftplugin/tex/normal-map.vim	/^nnoremap <localleader>tb itable$/;"	m
<right>	plugin/map/normal.vim	/^map <right> l$/;"	m
<space>M	plugin/visual.vim	/^vnoremap <space>M ?<up><cr>n$/;"	m
<space>b	plugin/third-party/denite.vim	/^nnoremap <space>b :Denite buffer -winheight=10<cr>$/;"	m
<space>c	plugin/third-party/coc.vim	/^nnoremap <silent> <space>c  :<C-u>CocList commands<cr>$/;"	m
<space>cs	plugin/third-party/denite.vim	/^nnoremap <space>cs :Denite colorscheme -split=vertical -winwidth=15<cr>$/;"	m
<space>d	plugin/third-party/coc.vim	/^nnoremap <silent> <space>d  :<C-u>CocList diagnostics<cr>$/;"	m
<space>e	plugin/third-party/coc.vim	/^nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>$/;"	m
<space>fh	plugin/third-party/denite.vim	/^nnoremap <space>fh :Denite file -split=horizontal -winheight=10<cr>$/;"	m
<space>ft	plugin/third-party/denite.vim	/^nnoremap <space>ft :Denite file -split=tab -winheight=10<cr>$/;"	m
<space>fv	plugin/third-party/denite.vim	/^nnoremap <space>fv :Denite file\/rec -split=vertical<cr> <Bar> 25<C-W>< $/;"	m
<space>l	plugin/third-party/denite.vim	/^nnoremap <space>l :Denite line -auto-resume -winheight=10<cr>¬$/;"	m
<space>m	plugin/visual.vim	/^vnoremap <space>m \/<up><cr>N$/;"	m
<space>n	plugin/third-party/coc.vim	/^nnoremap <silent> <space>n  :<C-u>CocNext<CR>$/;"	m
<space>o	plugin/third-party/coc.vim	/^nnoremap <silent> <space>o  :<C-u>CocList outline<cr>$/;"	m
<space>p	plugin/third-party/coc.vim	/^nnoremap <silent> <space>p  :<C-u>CocPrev<CR>$/;"	m
<space>r	plugin/third-party/coc.vim	/^nnoremap <silent> <space>r  :<C-u>CocListResume<CR>$/;"	m
<space>rh	plugin/third-party/denite.vim	/^nnoremap <space>rh :Denite file\/rec -split=horizontal -winheight=10<cr>¬$/;"	m
<space>rv	plugin/third-party/denite.vim	/^nnoremap <space>rv :Denite file\/rec -split=vertical -winwidth=25<cr> $/;"	m
<space>s	plugin/third-party/coc.vim	/^nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>$/;"	m
<space>t	plugin/map/normal.vim	/^nnoremap <space>t :tags<cr>$/;"	m
<up>	plugin/map/normal.vim	/^map <up> k$/;"	m
=#	ftplugin/tex/insert-map.vim	/^inoremap =# include$/;"	m
=*	ftplugin/tex/insert-map.vim	/^inoremap =* \\item $/;"	m
=-	ftplugin/tex/insert-map.vim	/^inoremap =- \\hline$/;"	m
=/	ftplugin/tex/insert-map.vim	/^inoremap =\/ code$/;"	m
==p	ftplugin/tex/insert-map.vim	/^inoremap ==p picture$/;"	m
=^	ftplugin/tex/insert-map.vim	/^inoremap =^ header$/;"	m
=_	ftplugin/tex/insert-map.vim	/^inoremap =_ footer$/;"	m
=a	ftplugin/tex/insert-map.vim	/^inoremap =a acronym$/;"	m
=c	ftplugin/tex/insert-map.vim	/^inoremap =c color$/;"	m
=g	ftplugin/tex/insert-map.vim	/^inoremap =g glossar$/;"	m
=h	ftplugin/tex/insert-map.vim	/^inoremap =h hyper$/;"	m
=i	ftplugin/tex/insert-map.vim	/^inoremap =i index$/;"	m
=m	ftplugin/tex/insert-map.vim	/^inoremap =m minted $/;"	m
=r	ftplugin/tex/insert-map.vim	/^inoremap =r reference$/;"	m
=t	ftplugin/tex/insert-map.vim	/^inoremap =t table$/;"	m
AddMatch	ftplugin/vim/complete.vim	/^function! AddMatch(base) abort$/;"	f
AddMatch	plugin/template.vim	/^function! AddMatch(base, palabraCompleta) abort$/;"	f
Book	ftplugin/tex/command.vim	/^command! Book :call Book()$/;"	c
Book	ftplugin/tex/command.vim	/^function! Book() abort "{{{$/;"	f
CocJson	plugin/third-party/coc.vim	/^augroup CocJson$/;"	a
CommanMapKeys	plugin/personal-control-mapping.vim	/^function! s:CommanMapKeys(Functional, arrows) abort$/;"	f
CommandMapKey	plugin/personal-control-mapping.vim	/^function! s:CommandMapKey(leader, combination, key) abort$/;"	f
CompleteEvent	ftplugin/vim/complete.vim	/^function! CompleteEvent() abort$/;"	f
CompleteEvent	plugin/template.vim	/^function! CompleteEvent(palabraCompleta) abort$/;"	f
Consecutiva	plugin/personal-abbreviation.vim	/^function! Consecutiva() abort$/;"	f
Consecutivas	plugin/personal-abbreviation.vim	/^function! Consecutivas() abort$/;"	f
CreateNormalEspaciadorMap	plugin/map/normal.vim	/^function! s:CreateNormalEspaciadorMap() abort "{{{$/;"	f
CreateNormalF1ToF12Map	plugin/map/normal.vim	/^function! s:CreateNormalF1ToF12Map() abort "{{{$/;"	f
CreateNormalFoldingMap	plugin/map/normal.vim	/^function! s:CreateNormalFoldingMap() abort "{{{$/;"	f
CreateNormalLeaderMap	plugin/map/normal.vim	/^function! s:CreateNormalLeaderMap() abort "{{{$/;"	f
CreateVisualMatchPairMap	plugin/visualMap.vim	/^function! s:CreateVisualMatchPairMap() abort "{{{$/;"	f
Dictionary	plugin/personal-command.vim	/^command! -complete=customlist,<SID>SetDictionary -nargs=1 Dictionary :let &dictionary = "\/usr\/share\/dict\/" . <q-args>$/;"	c
EnterTerminal	plugin/personal-autocommand-insert.vim	/^function! s:EnterTerminal() abort$/;"	f
Fold	plugin/third-party/coc.vim	/^command! -nargs=? Fold :call     CocAction('fold', <f-args>)$/;"	c
Format	plugin/third-party/coc.vim	/^command! -nargs=0 Format :call CocAction('format')$/;"	c
GLossary	ftplugin/tex/command.vim	/^command! GLossary :call GlossaryTex()$/;"	c
Glossary	ftplugin/tex/visual-map.vim	/^function! Glossary() abort "{{{$/;"	f
GlossaryTex	ftplugin/tex/command.vim	/^function! GlossaryTex() abort "{{{$/;"	f
GrepOperator	plugin/third-party/grepHardWay.vim	/^function! s:GrepOperator(type)$/;"	f
Hello	plugin/third-party/roxma.vim	/^com -nargs=1 Hello call s:hello.request(<f-args>)$/;"	c
HelloAsync	plugin/third-party/roxma.vim	/^com HelloAsync call s:hello.notify('greet')$/;"	c
HelloSync	plugin/third-party/roxma.vim	/^com HelloSync call s:hello.request('greet')$/;"	c
Help	ftplugin/help/mapping.vim	/^function! s:Help(type) abort$/;"	f
IrPestagna	plugin/map/tabpage.vim	/^function s:IrPestagna() abort$/;"	f
Italic	ftplugin/tex/visual-map.vim	/^function! Italic() abort$/;"	f
K	plugin/third-party/coc.vim	/^nnoremap <silent> K :call <SID>show_documentation()<CR>$/;"	m
LeaveTerminal	plugin/personal-autocommand-insert.vim	/^function! s:LeaveTerminal() abort$/;"	f
LightlineFilename	plugin/third-party/lightline.vim	/^function! LightlineFilename()$/;"	f
Link	ftplugin/help/mapping.vim	/^function! Link() abort$/;"	f
Ls	plugin/personal-command.vim	/^command -nargs=* -complete=customlist,MakeCommandCompletion Ls !ls <args>$/;"	c
Main	ftplugin/tex/command.vim	/^command! Main :call Main()$/;"	c
Main	ftplugin/tex/command.vim	/^function! Main() abort "{{{$/;"	f
Make	plugin/personal-command.vim	/^command -nargs=* -complete=customlist,MakeCommandCompletion Make make <args>$/;"	c
MakeCommandCompletion	plugin/personal-command.vim	/^function! MakeCommandCompletion(ArgLead, CmdLine, CursorPos) abort$/;"	f
MoveVisualMark	plugin/personal-abbreviation.vim	/^function! MoveVisualMark(mark, sign) abort$/;"	f
MoverPestagna	plugin/map/tabpage.vim	/^function! s:MoverPestagna(signo) abort$/;"	f
MyComplete	plugin/personal-complete.vim	/^fun! MyComplete()$/;"	f
MyGutentagsStatusLineRefresher	plugin/third-party/gutentags.vim	/^augroup MyGutentagsStatusLineRefresher$/;"	a
N	plugin/third-party/highliter.vim	/^nnoremap <silent> N :call WordNavigation('backward')<cr>$/;"	m
OR	plugin/third-party/coc.vim	/^command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')$/;"	c
ObtenerComienzoDeLaPalabra	ftplugin/vim/complete.vim	/^function! ObtenerComienzoDeLaPalabra(palabraImcompleta, linea) abort$/;"	f
ObtenerComienzoDeLaPalabra	plugin/template.vim	/^function! ObtenerComienzoDeLaPalabra(palabraImcompleta, linea) abort$/;"	f
OmniFunction	plugin/personal-autocommand-insert.vim	/^augroup OmniFunction $/;"	a
OpenTerminal	plugin/personal-autocommand-insert.vim	/^function! s:OpenTerminal() abort$/;"	f
Package	ftplugin/tex/command.vim	/^command! Package :call PackageTex()$/;"	c
PackageTex	ftplugin/tex/command.vim	/^function! PackageTex() abort "{{{$/;"	f
Printer	ftplugin/tex/command.vim	/^command! Printer :call PrinterTex()$/;"	c
PrinterTex	ftplugin/tex/command.vim	/^function! PrinterTex() abort "{{{$/;"	f
PutNumber	ftplugin/snippets/personal_snippet.vim	/^function! PutNumber(numero) abort$/;"	f
Q	plugin/map/tabpage.vim	/^nnoremap Q q$/;"	m
Reference	ftplugin/tex/command.vim	/^command! Reference :call ReferenceTex()$/;"	c
ReferenceTex	ftplugin/tex/command.vim	/^function! ReferenceTex() abort "{{{$/;"	f
RightMap	ftplugin/snippets/personal_snippet.vim	/^function! RightMap(mode, number, key) abort "{{{$/;"	f
STerminal	plugin/personal-command.vim	/^command STerminal :8split term:\/\/bash$/;"	c
SetDictionary	plugin/personal-command.vim	/^function! s:SetDictionary(ArgLead, CmdLine, CursorPos) abort$/;"	f
SnippetEdit	plugin/third-party/coc-snippet.vim	/^command! SnippetEdit :CocCommand snippets.editSnippets$/;"	c
SnippetFile	plugin/third-party/coc-snippet.vim	/^command! SnippetFile :CocCommand snippets.openSnippetFile$/;"	c
SnippetMap	ftplugin/snippets/personal_snippet.vim	/^function! SnippetMap(mode, key) abort "{{{$/;"	f
SwapLine	plugin/personal-abbreviation.vim	/^function! SwapLine(sign) abort $/;"	f
SwapLines	plugin/personal-abbreviation.vim	/^function! SwapLines(sign) abort $/;"	f
SwapVisualLines	plugin/personal-abbreviation.vim	/^function! SwapVisualLines(sign) abort$/;"	f
SwitchKeyword	plugin/personal-command.vim	/^command! SwitchKeyword :call SwitchKeyword()$/;"	c
SwitchMatchPair	plugin/personal-command.vim	/^command! SwitchMatchPair :call SwitchMatchPairMapping()$/;"	c
TTerminal	plugin/personal-command.vim	/^command TTerminal :split term:\/\/bash | execute "normal! \\<C-W>T"$/;"	c
Tag	ftplugin/help/mapping.vim	/^function! Tag() abort$/;"	f
Tag	plugin/map/normal.vim	/^function! s:Tag(tag) abort$/;"	f
Terminal	plugin/personal-autocommand-insert.vim	/^	augroup Terminal$/;"	a
Terminal	plugin/personal-autocommand-insert.vim	/^function! s:Terminal() abort$/;"	f
TexCommand	ftplugin/tex/visual-map.vim	/^function! TexCommand(command) abort "{{{$/;"	f
TransponerHaciaLaDerecha	plugin/visual.vim	/^function! s:TransponerHaciaLaDerecha() abort$/;"	f
TransponerHaciaLaIzquierda	plugin/visual.vim	/^function! s:TransponerHaciaLaIzquierda() abort$/;"	f
VTerminal	plugin/personal-command.vim	/^command VTerminal :vsplit term:\/\/bash$/;"	c
VimInit	plugin/personal-autocommand-insert.vim	/^augroup VimInit$/;"	a
VisualBlockExpandir	plugin/visual.vim	/^function! s:VisualBlockExpandir() abort$/;"	f
VisualBlockPut	plugin/visual.vim	/^function! s:VisualBlockPut(matchpair) abort $/;"	f
VisualBlockReducir	plugin/visual.vim	/^function! s:VisualBlockReducir() abort$/;"	f
VisualPut	plugin/visual.vim	/^function! s:VisualPut(matchpair) abort "{{{$/;"	f
VisualRegex	plugin/visual.vim	/^function! s:VisualRegex() abort$/;"	f
[g	plugin/third-party/coc.vim	/^nmap <silent> [g <Plug>(coc-diagnostic-prev)$/;"	m
[n	plugin/map/normal.vim	/^nnoremap [n :<C-U>call <SID>Tag("pop")<cr>$/;"	m
]g	plugin/third-party/coc.vim	/^nmap <silent> ]g <Plug>(coc-diagnostic-next)$/;"	m
]n	plugin/map/normal.vim	/^nnoremap ]n :<C-U>call <SID>Tag("tag")<cr>$/;"	m
af	plugin/third-party/coc.vim	/^omap af <Plug>(coc-funcobj-a)$/;"	m
aso	plugin/map/command.vim	/^cnoremap aso source %$/;"	m
bash#complete	autoload/bash.vim	/^function! bash#complete(partialCommand)$/;"	f
check_back_space	plugin/third-party/coc.vim	/^function! s:check_back_space() abort$/;"	f
denite_filter_my_settings	plugin/third-party/denite.vim	/^function! s:denite_filter_my_settings() abort$/;"	f
denite_my_settings	plugin/third-party/denite.vim	/^function! s:denite_my_settings() abort$/;"	f
filetype_vim	plugin/third-party/folding.vim	/^augroup filetype_vim$/;"	a
g:alphabet	plugin/personal-control-mapping.vim	/^let g:alphabet = ["a","b","c","d","e","f","g","h","i","j","k","l","m"$/;"	v
g:arrows	plugin/personal-control-mapping.vim	/^let g:arrows = ["up", "down", "left", "right"]$/;"	v
g:auto_save	plugin/third-party/autosave.vim	/^let g:auto_save = 1  " enable AutoSave on Vim startup$/;"	v
g:coc_snippet_next	plugin/third-party/coc-snippet.vim	/^let g:coc_snippet_next = '<c-j>'$/;"	v
g:coc_snippet_next	plugin/third-party/coc.vim	/^let g:coc_snippet_next = '<tab>'$/;"	v
g:coc_snippet_prev	plugin/third-party/coc-snippet.vim	/^let g:coc_snippet_prev = '<s-tab>'$/;"	v
g:especialcharacter	plugin/template.vim	/^let g:especialcharacter = {'\\i': "identifier character (see 'isident' option)",$/;"	v
g:gutentags_ctags_exclude	plugin/third-party/gutentags.vim	/^let g:gutentags_ctags_exclude = ['*.exe', '*.o', '*.obj', '.*.swp', '.*.swo', '.ccls-cache', '*.md']$/;"	v
g:gutentags_exclude_project_root	plugin/third-party/gutentags.vim	/^let g:gutentags_exclude_project_root = ['usr\/local', '~\/.vim\/',$/;"	v
g:gutentags_project_root	plugin/third-party/gutentags.vim	/^let g:gutentags_project_root = ['.git', '.hg', '.svn', '.bzr', '_darcs', '_darcs', '_FOSSIL_', '.fslckout', 'make', 'Make'. 'Makefile']$/;"	v
g:lightline	plugin/third-party/lightline.vim	/^let g:lightline = {$/;"	v
g:livepreview_engine	plugin/third-party/vim-latex-live-preview.vim	/^let g:livepreview_engine = 'xelatex --shell-escape'$/;"	v
g:livepreview_previewer	plugin/third-party/vim-latex-live-preview.vim	/^let g:livepreview_previewer = 'evince'$/;"	v
g:matchPairs	plugin/map/normal.vim	/^let g:matchPairs = ["''", "<>", "{}", '""', '[]', "()"]$/;"	v
g:multi_cursor_next_key	plugin/third-party/multiple-cursor.vim	/^let g:multi_cursor_next_key            = '<C-n>'$/;"	v
g:multi_cursor_prev_key	plugin/third-party/multiple-cursor.vim	/^let g:multi_cursor_prev_key            = '<C-p>'$/;"	v
g:multi_cursor_quit_key	plugin/third-party/multiple-cursor.vim	/^let g:multi_cursor_quit_key            = '<Esc>'$/;"	v
g:multi_cursor_select_all_key	plugin/third-party/multiple-cursor.vim	/^let g:multi_cursor_select_all_key      = 'g<M-n>'$/;"	v
g:multi_cursor_select_all_word_key	plugin/third-party/multiple-cursor.vim	/^let g:multi_cursor_select_all_word_key = '<A-n>'$/;"	v
g:multi_cursor_skip_key	plugin/third-party/multiple-cursor.vim	/^let g:multi_cursor_skip_key            = '<C-x>'$/;"	v
g:multi_cursor_start_key	plugin/third-party/multiple-cursor.vim	/^let g:multi_cursor_start_key           = 'g<C-n>'$/;"	v
g:multi_cursor_start_word_key	plugin/third-party/multiple-cursor.vim	/^let g:multi_cursor_start_word_key      = '<C-n>'$/;"	v
g:multi_cursor_use_default_mapping	plugin/third-party/multiple-cursor.vim	/^let g:multi_cursor_use_default_mapping=0$/;"	v
g:pattern	plugin/template.vim	/^let g:pattern = {'*': "0 or more as many as possible",$/;"	v
g:personal_abbreviation	plugin/personal-abbreviation.vim	/^let g:personal_abbreviation = 1$/;"	v
g:syntastic_always_populate_loc_list	plugin/third-party/syntastic.vim	/^let g:syntastic_always_populate_loc_list = 1$/;"	v
g:syntastic_auto_loc_list	plugin/third-party/syntastic.vim	/^let g:syntastic_auto_loc_list = 1$/;"	v
g:syntastic_check_on_open	plugin/third-party/syntastic.vim	/^let g:syntastic_check_on_open = 1$/;"	v
g:syntastic_check_on_wq	plugin/third-party/syntastic.vim	/^let g:syntastic_check_on_wq = 0$/;"	v
g:tabpager	plugin/map/tabpage.vim	/^let g:tabpager = $/;"	v
g:template_path	autoload/template/templator.vim	/^let g:template_path = "~\/.vim\/bundle\/personal-vim\/template\/"$/;"	v
g:tex_insert_map	ftplugin/tex/insert-map.vim	/^let g:tex_insert_map = 1$/;"	v
g:tex_normal_map	ftplugin/tex/normal-map.vim	/^let g:tex_normal_map = 1$/;"	v
g:tex_visual_map	ftplugin/tex/visual-map.vim	/^let g:tex_visual_map = 1$/;"	v
g:trans_default_direction	plugin/third-party/translate.vim	/^let g:trans_default_direction="en:es"$/;"	v
g:unite_force_overwrite_statusline	plugin/third-party/lightline.vim	/^let g:unite_force_overwrite_statusline = 0$/;"	v
g:vimfiler_force_overwrite_statusline	plugin/third-party/lightline.vim	/^let g:vimfiler_force_overwrite_statusline = 0$/;"	v
g:vimshell_force_overwrite_statusline	plugin/third-party/lightline.vim	/^let g:vimshell_force_overwrite_statusline = 0$/;"	v
g:vimtex_view_general_viewer	plugin/third-party/vimtex.vim	/^let g:vimtex_view_general_viewer = 'evince'$/;"	v
g:ycm_auto_trigger	plugin/third-party/youcompletme.vim	/^let g:ycm_auto_trigger = 1$/;"	v
g:ycm_clangd_args	plugin/third-party/youcompletme.vim	/^let g:ycm_clangd_args = ['-log=verbose', '-pretty']$/;"	v
g:ycm_clangd_binary_path	plugin/third-party/youcompletme.vim	/^let g:ycm_clangd_binary_path = exepath("clangd")$/;"	v
g:ycm_clangd_uses_ycmd_caching	plugin/third-party/youcompletme.vim	/^let g:ycm_clangd_uses_ycmd_caching = 0$/;"	v
g:ycm_collect_identifiers_from_tags_files	plugin/third-party/youcompletme.vim	/^let g:ycm_collect_identifiers_from_tags_files = 1  " be carefull may be your program too slow$/;"	v
g:ycm_complete_in_strings	plugin/third-party/youcompletme.vim	/^let g:ycm_complete_in_strings = 1$/;"	v
g:ycm_enable_diagnostic_highlighting	plugin/third-party/youcompletme.vim	/^let g:ycm_enable_diagnostic_highlighting = 1$/;"	v
g:ycm_error_symbol	plugin/third-party/youcompletme.vim	/^let g:ycm_error_symbol = '🚨'$/;"	v
g:ycm_extra_conf_vim_data	plugin/third-party/youcompletme.vim	/^let g:ycm_extra_conf_vim_data = [$/;"	v
g:ycm_global_ycm_extra_conf	plugin/third-party/youcompletme.vim	/^let g:ycm_global_ycm_extra_conf = '~\/global_extra_conf.py'$/;"	v
g:ycm_key_invoke_completion	plugin/third-party/youcompletme.vim	/^let g:ycm_key_invoke_completion = '<C-h>'$/;"	v
g:ycm_max_num_candidates	plugin/third-party/youcompletme.vim	/^let g:ycm_max_num_candidates = 50$/;"	v
g:ycm_min_num_identifier_candidate_chars	plugin/third-party/youcompletme.vim	/^let g:ycm_min_num_identifier_candidate_chars = 0$/;"	v
g:ycm_min_num_of_chars_for_completion	plugin/third-party/youcompletme.vim	/^let g:ycm_min_num_of_chars_for_completion = 1$/;"	v
g:ycm_python_interpreter_path	plugin/third-party/youcompletme.vim	/^let g:ycm_python_interpreter_path = ''$/;"	v
g:ycm_python_sys_path	plugin/third-party/youcompletme.vim	/^let g:ycm_python_sys_path = []$/;"	v
g:ycm_seed_identifiers_with_syntax	plugin/third-party/youcompletme.vim	/^let g:ycm_seed_identifiers_with_syntax = 1$/;"	v
g:ycm_use_clangd	plugin/third-party/youcompletme.vim	/^let g:ycm_use_clangd = 1$/;"	v
g:ycm_warning_symbol	plugin/third-party/youcompletme.vim	/^let g:ycm_warning_symbol = '⚠️ '$/;"	v
gN	plugin/visualMap.vim	/^vnoremap gN <Esc>NNviw$/;"	m
gd	plugin/third-party/coc.vim	/^nmap <silent> gd <Plug>(coc-definition)$/;"	m
get_gutentags_status	plugin/third-party/gutentags.vim	/^function! s:get_gutentags_status(mods) abort$/;"	f
gi	plugin/third-party/coc.vim	/^nmap <silent> gi <Plug>(coc-implementation)$/;"	m
gn	plugin/visualMap.vim	/^vnoremap gn <Esc>nviw$/;"	m
gp	plugin/visualMap.vim	/^vnoremap gp <Esc>NNviw$/;"	m
gr	plugin/third-party/coc.vim	/^nmap <silent> gr <Plug>(coc-references)$/;"	m
gy	plugin/third-party/coc.vim	/^nmap <silent> gy <Plug>(coc-type-definition)$/;"	m
if	plugin/third-party/coc.vim	/^omap if <Plug>(coc-funcobj-i)$/;"	m
map#normal#espaciador#agnadirNumeroDeLinea	autoload/map/normal/espaciador.vim	/^function! map#normal#espaciador#agnadirNumeroDeLinea()$/;"	f
map#normal#espaciador#espaciarAbajo	autoload/map/normal/espaciador.vim	/^function! map#normal#espaciador#espaciarAbajo()$/;"	f
map#normal#espaciador#espaciarArriba	autoload/map/normal/espaciador.vim	/^function! map#normal#espaciador#espaciarArriba()$/;"	f
map#normal#espaciador#espaciarDerecha	autoload/map/normal/espaciador.vim	/^function! map#normal#espaciador#espaciarDerecha()$/;"	f
map#normal#espaciador#espaciarIzquierda	autoload/map/normal/espaciador.vim	/^function! map#normal#espaciador#espaciarIzquierda()$/;"	f
map#normal#espaciador#removerEspaciadoDeAbajo	autoload/map/normal/espaciador.vim	/^function! map#normal#espaciador#removerEspaciadoDeAbajo()$/;"	f
map#normal#espaciador#removerEspaciadoDeArriba	autoload/map/normal/espaciador.vim	/^function! map#normal#espaciador#removerEspaciadoDeArriba() $/;"	f
map#normal#espaciador#removerNumeroDeLinea	autoload/map/normal/espaciador.vim	/^function! map#normal#espaciador#removerNumeroDeLinea()$/;"	f
map#normal#switcher#onMatchPairMapping	autoload/map/normal/switcher.vim	/^function! map#normal#switcher#onMatchPairMapping(mode) abort "{{{$/;"	f
map#visual#matcherPair#putAngleBracket	autoload/map/visual/matcherPair.vim	/^function! map#visual#matcherPair#putAngleBracket()$/;"	f
map#visual#matcherPair#putBackStick	autoload/map/visual/matcherPair.vim	/^function! map#visual#matcherPair#putBackStick()$/;"	f
map#visual#matcherPair#putBar	autoload/map/visual/matcherPair.vim	/^function! map#visual#matcherPair#putBar()$/;"	f
map#visual#matcherPair#putCharacterBetween	autoload/map/visual/matcherPair.vim	/^function! map#visual#matcherPair#putCharacterBetween(left, right)$/;"	f
map#visual#matcherPair#putCurlyBracket	autoload/map/visual/matcherPair.vim	/^function! map#visual#matcherPair#putCurlyBracket()$/;"	f
map#visual#matcherPair#putDobleQuote	autoload/map/visual/matcherPair.vim	/^function! map#visual#matcherPair#putDobleQuote()$/;"	f
map#visual#matcherPair#putParenthesis	autoload/map/visual/matcherPair.vim	/^function! map#visual#matcherPair#putParenthesis()$/;"	f
map#visual#matcherPair#putSingleQuote	autoload/map/visual/matcherPair.vim	/^function! map#visual#matcherPair#putSingleQuote()$/;"	f
map#visual#matcherPair#putSquareBracket	autoload/map/visual/matcherPair.vim	/^function! map#visual#matcherPair#putSquareBracket()$/;"	f
map#visual#matcherPair#putStar	autoload/map/visual/matcherPair.vim	/^function! map#visual#matcherPair#putStar()$/;"	f
mygroup	plugin/third-party/coc.vim	/^augroup mygroup$/;"	a
n	plugin/third-party/highliter.vim	/^nnoremap <silent> n :call WordNavigation('forward')<cr>$/;"	m
q	plugin/map/tabpage.vim	/^nnoremap q :<C-U>call <SID>IrPestagna()<cr><Esc>$/;"	m
running	plugin/personal-autocommand-insert.vim	/^	let running = jobwait([&channel], 0)[0] == -1$/;"	v
s:hello	plugin/third-party/roxma.vim	/^let s:hello = yarp#py3('hello')$/;"	v
s:matches	ftplugin/vim/complete.vim	/^let s:matches = ["BufNewFile",$/;"	v
s:pluginPath	autoload/bash.vim	/^let s:pluginPath = expand('<sfile>:p:h') . '\/..'$/;"	v
s:visualblock	plugin/visual.vim	/^let s:visualblock = $/;"	v
s:visualmode	plugin/visual.vim	/^let s:visualmode = $/;"	v
show_documentation	plugin/third-party/coc.vim	/^function! s:show_documentation()$/;"	f
template#dataStructure#forItem	autoload/template/dataStructure.vim	/^function! template#dataStructure#forItem() abort$/;"	f
template#dataStructure#forKey	autoload/template/dataStructure.vim	/^function! template#dataStructure#forKey() abort$/;"	f
template#function#dividir	autoload/template/function.vim	/^function! template#function#dividir() abort$/;"	f
template#function#estaVacio	autoload/template/function.vim	/^function! template#function#estaVacio() abort$/;"	f
template#function#main	autoload/template/function.vim	/^function! template#function#main() abort$/;"	f
template#function#multiplicar	autoload/template/function.vim	/^function! template#function#multiplicar() abort$/;"	f
template#function#restar	autoload/template/function.vim	/^function! template#function#restar() abort$/;"	f
template#function#sumar	autoload/template/function.vim	/^function! template#function#sumar() abort$/;"	f
template#keyword#augroup	autoload/template/keyword.vim	/^function! template#keyword#augroup() abort$/;"	f
template#keyword#else	autoload/template/keyword.vim	/^function! template#keyword#else() abort$/;"	f
template#keyword#elseIf	autoload/template/keyword.vim	/^function! template#keyword#elseIf() abort$/;"	f
template#keyword#for	autoload/template/keyword.vim	/^function! template#keyword#for() abort$/;"	f
template#keyword#function	autoload/template/keyword.vim	/^function! template#keyword#function() abort$/;"	f
template#keyword#if	autoload/template/keyword.vim	/^function! template#keyword#if() abort$/;"	f
template#keyword#while	autoload/template/keyword.vim	/^function! template#keyword#while() abort$/;"	f
template#templator#complete	autoload/template/templator.vim	/^function! template#templator#complete(findstart, base) abort "{{{$/;"	f
template#templator#construir	autoload/template/templator.vim	/^function! template#templator#construir(fileName, pattern)$/;"	f
vim#mapper#mapArrow	autoload/vim/mapper.vim	/^function! vim#mapper#mapArrow() abort "{{{$/;"	f
vim#mapper#mapControlInInsertMode	autoload/vim/mapper.vim	/^function! vim#mapper#mapControlInInsertMode() abort "{{{$/;"	f
vim#mapper#mapMetaCapitalInInsertMode	autoload/vim/mapper.vim	/^function! vim#mapper#mapMetaCapitalInInsertMode() abort "{{{$/;"	f
vim#mapper#mapMetaLowerInInsertMode	autoload/vim/mapper.vim	/^function! vim#mapper#mapMetaLowerInInsertMode() abort "{{{$/;"	f
vim#mapper#mapShiftInInsertMode	autoload/vim/mapper.vim	/^function! vim#mapper#mapShiftInInsertMode() abort "{{{$/;"	f
visualblock.cortarDerecha	plugin/visual.vim	/^function! s:visualblock.cortarDerecha() abort$/;"	f
visualblock.cortarIzquierda	plugin/visual.vim	/^function! s:visualblock.cortarIzquierda() abort$/;"	f
visualblock.escalar	plugin/visual.vim	/^function! s:visualblock.escalar(positionx, positiony) abort "{{{$/;"	f
visualblock.expandir	plugin/visual.vim	/^function! s:visualblock.expandir() abort "{{{$/;"	f
visualblock.haciaLaDerecha	plugin/visual.vim	/^function! s:visualblock.haciaLaDerecha() abort$/;"	f
visualblock.haciaLaIzquierda	plugin/visual.vim	/^function! s:visualblock.haciaLaIzquierda() abort$/;"	f
visualblock.initializeBlock	plugin/visual.vim	/^function! s:visualblock.initializeBlock() abort "{{{$/;"	f
visualblock.putMatchPair	plugin/visual.vim	/^function! s:visualblock.putMatchPair(matchpair) abort "{{{$/;"	f
visualblock.reducir	plugin/visual.vim	/^function! s:visualblock.reducir() abort "{{{$/;"	f
visualblock.seleccionar	plugin/visual.vim	/^function! s:visualblock.seleccionar() abort "{{{$/;"	f
visualblock.sizeHorizontal	plugin/visual.vim	/^function! s:visualblock.sizeHorizontal() abort "{{{$/;"	f
visualblock.sizeVertical	plugin/visual.vim	/^function! s:visualblock.sizeVertical() abort "{{{$/;"	f
visualmode.getColumna	plugin/visual.vim	/^function! s:visualmode.getColumna() dict$/;"	f
visualmode.getLinea	plugin/visual.vim	/^function! s:visualmode.getLinea() dict$/;"	f
visualmode.initializeVisualMode	plugin/visual.vim	/^function! s:visualmode.initializeVisualMode(linea, columna) abort$/;"	f
visualmode.moverCursor	plugin/visual.vim	/^function! s:visualmode.moverCursor() abort$/;"	f
visualmode.nextColumna	plugin/visual.vim	/^function! s:visualmode.nextColumna() abort$/;"	f
visualmode.nextLinea	plugin/visual.vim	/^function! s:visualmode.nextLinea() abort$/;"	f
visualmode.previousColumna	plugin/visual.vim	/^function! s:visualmode.previousColumna() abort$/;"	f
visualmode.previousLinea	plugin/visual.vim	/^function! s:visualmode.previousLinea() abort$/;"	f
visualmode.restaurarPosicion	plugin/visual.vim	/^function! s:visualmode.restaurarPosicion() abort$/;"	f
visualmode.setColumna	plugin/visual.vim	/^function! s:visualmode.setColumna(columna) dict$/;"	f
visualmode.setLinea	plugin/visual.vim	/^function! s:visualmode.setLinea(linea) dict$/;"	f
